
# Autogenerated by mlir-tblgen; don't manually edit.

from ..ir import *
from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context
_ods_ir = _ods_cext.ir

try:
  from . import _affine_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins

@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "affine"
  pass

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AffineForOp(_ods_ir.OpView):
  OPERATION_NAME = "affine.for"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AffineIfOp(_ods_ir.OpView):
  OPERATION_NAME = "affine.if"

  _ODS_REGIONS = (2, True)

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AffineLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "affine.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, memref, indices, map=None, *, loc=None, ip=None):
    operands = []
    results = []
    results.append(result)
    operands.append(memref)
    operands.extend(indices)
    attributes = {}
    if map == None:
      identity_map = AffineMap.get_identity(len(indices))
      map = AffineMapAttr.get(identity_map)
    attributes["map"] = map
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      loc=loc, ip=ip))

  @builtins.property
  def memref(self):
    return self.operation.operands[0]

  @builtins.property
  def indices(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AffineStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "affine.store"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def memref(self):
    return self.operation.operands[1]

  @builtins.property
  def indices(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AffineYieldOp(_ods_ir.OpView):
  OPERATION_NAME = "affine.yield"

  _ODS_REGIONS = (0, True)

  def __init__(self, operands_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    operands.extend(operands_)
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      loc=loc, ip=ip))

  @builtins.property
  def operands_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]